#  }
#}
for (item in frames) {
print(item)
if (item != "demos") {
demos <- merge(demos, eval(parse(text = item)), by = "SEQN", all.x = TRUE)
demos <- Filter(function(x)!all(is.na(x)), demos)
}
}
View(demos)
datasets <- preloaddata()
finalsets <- dropbyyear(1)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
merge(demos, bmx, by = "SEQN", all.x=TRUE)
demos <- merge(demos, bmx, by = "SEQN", all.x=TRUE)
demos <- merge(demos, bmx_b, by = "SEQN", all.x=TRUE)
demos <- merge(demos, bmx_c, by = "SEQN", all.x=TRUE)
demos <- merge(demos, bmx_d, by = "SEQN", all.x=TRUE)
View(bmx_c)
View(bmx_d)
View(demos)
View(bmx_d)
View(bmx_c)
?merge
test <- merge(bmx, bmx_b, all.x = TRUE)
test <- merge(test, bmx_c, all.x = TRUE)
test <- merge(test, bmx_d, all.x = TRUE)
test <- merge(test, bmx_e, all.x = TRUE)
View(test)
test <- merge(test, bmx_f, all.x = TRUE)
test <- merge(test, bmx_g, all.x = TRUE)
test <- merge(demos, bmx_g, all.x = TRUE)
View(demos)
datasets <- preloaddata()
finalsets <- dropbyyear(1)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
names(test)
names(test) %in% names(demos)
View(test)
View(demos)
test <- merge(bmx, bmx_b, all.x = TRUE)
test <- merge(test, bmx_c, all.x = TRUE)
test <- merge(test, bmx_d, all.x = TRUE)
test <- merge(test, bmx_e, all.x = TRUE)
test <- merge(test, bmx_f, all.x = TRUE)
test <- merge(test, bmx_g, all.x = TRUE)
names(test) %in% names(demos)
View(test)
test <- merge(bmx, bmx_b)
test <- merge(bmx, bmx_b, by = "SEQN")
test <- merge(bmx, bmx_b, by = "SEQN")
test <- merge(bmx, bmx_b, by = "SEQN", all.x = TRUW)
test <- merge(bmx, bmx_b, by = "SEQN", all.x = TRUE)
rm(test)
test <- merge(bmx, bmx_b, by = "SEQN", all.x = TRUE)
test <- merge(bmx, bmx_b, by = "SEQN", all = TRUE)
rm(test)
test <- merge(bmx, bmx_b, by = "SEQN", all = TRUE)
test <- merge(test, bmx_c, by = "SEQN", all = TRUE)
test <- merge(test, bmx_d, by = "SEQN", all = TRUE)
View(test)
names(test)
names(bmx_c)
names(bmx_d)
View(bmx_c)
View(bmx_d)
bmx_c$SEQN in bmx_d$SEQN
bmx_c$SEQN %in% bmx_d$SEQN
if(bmx_c$SEQN %in% bmx_d$SEQN) print("hi")
for(bmx_c$SEQN %in% bmx_d$SEQN) print("hi")
bmx_c$SEQN %in% bmx_d$SEQN
merge(bmx_c, bmx_d, by = "SEQN", all = TRUE)
merge(bmx, bmx_d, by = "SEQN", all = TRUE)
merge(bmx_b, bmx_d, by = "SEQN", all = TRUE)
merge(bmx_c, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bmx, bmx_b, by = "SEQN", all = TRUE)
test <- merge(test, bmx_c, by = "SEQN", all = TRUE)
test <- merge(test, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bmx, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bbmx_b, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bmx_b, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bmx_c, bmx_d, by = "SEQN", all = TRUE)
test <- merge(bmx_g, bmx_f, by = "SEQN", all = TRUE)
test <- merge(test, bmx_e, by = "SEQN", all = TRUE)
test <- merge(test, bmx_d, by = "SEQN", all = TRUE)
test <- rbind(bmx, bmx_b, bmx_c, bmx_d, bmx_e, bmx_f, bmx_g)
test <- rbind.fill(bmx, bmx_b, bmx_c, bmx_d, bmx_e, bmx_f, bmx_g)
View(test)
library(nhanesdata)
library(plyr)
preloaddata <- function (){
datasets <- c('demo', 'dietary', 'exam', 'lab', 'question', 'limited')
for (item in datasets) {
temp <- cbind(item, read.table(paste0("./", item, ".txt"), "\t", header=FALSE))
assign(item, temp)
}
datasets <- rbind(demo, dietary, exam, lab, question, limited)
colnames(datasets)[1] <- 'dataset'
datasets[[7]] <- gsub(" *.* ", "", datasets[[4]])
datasets[[4]] <- gsub(" .*", "", datasets[[4]])
rm(temp,demo,dietary,exam,lab,question,limited)
return(datasets)
}
###################### Determine percentage of
dropbyyear <- function(p) {
datayear <- data.frame(cbind(as.character(datasets$V1), datasets$V3))
colnames(datayear) <- c("years","set")
datayear$set_base <- gsub("_.*$", "", datayear$set)
datayear$from <- as.numeric(substr(datayear$years, 1, 4))
datayear$to <- as.numeric(substr(datayear$years, 6, 9))
datayear <- unique(adply(datayear, 1, summarise, year = seq(from, to))[c("set","set_base", "year")])
for(y in unique(datayear$year)) {
datayear[paste("y",y,sep="")] <- ifelse(datayear$year==y,1,0) }
yearsum <- aggregate(datayear[,4:19], by=list(Category=datayear$set_base), FUN=sum)
yearsum$avg <- rowMeans(yearsum[,2:17])
return(yearsum[which(yearsum$avg >= p),1])
}
####################
dropbyage <- function(age) {
demos <- tolower(datasets[which(gsub("_.*$", "", datasets$V3) == "DEMO" ),4])
demos <- demos[demos != "demo_h"]
data(list = demos)
demos <- rbind.fill(demo, demo_b, demo_c, demo_d, demo_e, demo_f, demo_g)
return(demos[which(demos$RIDAGEYR >= age), ])
}
datasets <- preloaddata()
finalsets <- dropbyyear(1)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
test <- rbind.fill(bmx, bmx_b, bmx_c, bmx_d, bmx_e, bmx_f, bmx_g)
data(list = tolower(c("DEMOS", datasets[[4]])))
classFilter <- function(x) inherits(get(x), 'data.frame' )
frames <- Filter( classFilter, ls() )
test <- rbind.fill(bmx, bmx_b, bmx_c, bmx_d, bmx_e, bmx_f, bmx_g)
test2 <- merge(demos, test, by="SEQN")
test2 <- merge(demos, test, by="SEQN", all = TRUE)
test2 <- merge(demos, test, by="SEQN")
test2 <- merge(demos, test, by="SEQN", all.y=TRUE)
test2 <- merge(demos, test, by="SEQN", all.x = =TRUE)
test2 <- merge(demos, test, by="SEQN", all.x =TRUE)
gsub("_.*$", "", datasets$V3)
unique(gsub("_.*$", "", datasets$V3))
datasets$V3
"BMX" %in$ datasets$V3
"BMX" %in$ datasets$V3
"BMX" %in% datasets$V3
gsub("_.*$", "", datasets$V3) == "BMX"
if(gsub("_.*$", "", datasets$V3) == "BMX") {print("hi") }
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in for(item in gsub("_.*$", "", datasets$V3)) {
print(item2)
}
)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in for(item in gsub("_.*$", "", datasets$V3))) {
print(item2)
}
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in gsub("_.*$", "", datasets$V3)) {
print(item2)
}
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
print(item2)
}
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) print(item2)
}
}
test = c()
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(test)
}
test = c()
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print("test = ", test)
}
test = c()
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(paste(("test = ", test))
}
test = c()
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(paste(("test = ", test)))
}
test = c()
for(item in unique(gsub("_.*$", "", datasets$V3))) {
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(paste("test = ", test))
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(paste("test = ", test))
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = c(test, item2)
}
print(test)
}
test
unqieu(test)
unique(test)
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = unique(c(test, item2))
}
print(test)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) test = unique(c(test, item2))
}
item <- test
print(item)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(test, item2))
}
item <- rbind.fill(list = setlist)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(test, item2))
}
item <- rbind.fill(list = setlist)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
test = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(setlist, item2))
}
item <- rbind.fill(list = setlist)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
setlist = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(setlist, item2))
}
item <- rbind.fill(list = setlist)
}
item
unquote(item)
for(item in unique(gsub("_.*$", "", datasets$V3))) {
setlist = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(setlist, item2))
}
datatemp <- rbind.fill(list = setlist)
merge(demos, datatemp, by="SEQN", all.x = TRUE)
}
View(demos)
View(bmx)
for(item in unique(gsub("_.*$", "", datasets$V3))) {
setlist = c()
for(item2 in datasets$V3) {
if(gsub("_.*$", "", item2) == item) setlist = unique(c(setlist, item2))
}
print(setlist)
datatemp <- rbind.fill(list = setlist)
merge(demos, datatemp, by = "SEQN", all.x = TRUE)
}
datatemp <- rbind.fill(c("CDEMO_AD", "CDEMO_EH"))
datatemp <- rbind.fill(list = c("CDEMO_AD", "CDEMO_EH"))
datatemp <- do.call("rbind.fill", c("CDEMO_AD", "CDEMO_EH"))
datatemp <- do.call("rbind.fill", list("CDEMO_AD", "CDEMO_EH"))
datatemp <- do.call("rbind.fill", list(c("CDEMO_AD", "CDEMO_EH")))
datatemp <- do.call("rbind.fill", list = c("CDEMO_AD", "CDEMO_EH"))
test <- list("hi")
test <- list(test, "hi")
test <- list(test, "hi2")
test <- list(test, "hi2")
test <- list(test, "hi3")
test
test[1] <- 1
test[2] <- 2
test[3] <- 3
test[4] <- 4
test
test[1] <- "bmx"
test2 <- "bmx"
test2[1] <- "bmx"
test2[2] <- "bmx_b"
test2 <- list()
test2[1] <- "bmx"
test2[2] <- "bmx_b"
datatemp <- rbind.fill(test2)
datatemp <- rbind.fill(list = test2)
do.call("rbind.fill", list = test2)
do.call("rbind.fill", test2)
do.call("rbind.fill", list(test2))
test2[1] <- bmx
test2[1] <- name(bmx)
test2[1] <- "bmx"
do.call("rbind.fill", list(test2))
do.call("rbind.fill", list = test2)
do.call(rbind.fill, lapply(ls(pattern = "bmx"), get))
test <- do.call(rbind.fill, lapply(ls(pattern = "bmx"), get))
for(item in unique(gsub("_.*$", "", datasets$V3))) {
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
datasets <- preloaddata()
finalsets <- dropbyyear(1)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
data(list = tolower(c("DEMOS", datasets[[4]])))
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
datasets <- preloaddata()
finalsets <- dropbyyear(1)
View(datasets)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
data(list = tolower(c("DEMOS", datasets[[4]])))
datasets[[4]]
data("CDEMO_AD")
View(datasets)
rm(tempdata)
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
View(datasets)
dropbyRDC <- function() {
return(datasets[which(V4 = "RDC Only")])
}
dropbyRDC
dropbyRDC()
datasets[which(V4 = "RDC Only")]
datasets[which(V4 = "RDC Only"),]
datasets[which(datasets$V4 = "RDC Only"),]
datasets[which(datasets$V4 == "RDC Only"),]
datasets$V3[which(datasets$V4 == "RDC Only"),]
datasets[which(datasets$V4 == "RDC Only"),]
test <- dropbyRDC()
dropbyRDC <- function() {
return(datasets[which(V4 = "RDC Only")])
}
test <- dropbyRDC()
datasets[which(V4 = "RDC Only"),]
datasets[which(datasets$V4 = "RDC Only"),]
datasets[which(datasets$V4 == "RDC Only"),]
dropbyRDC <- function() {
return(datasets[which(datasets$V4 == "RDC Only"),])
}
test <- dropbyRDC()
test <- dropbyRDC()[3]
View(test)
test <- dropbyRDC()[4]
View(test)
test <- datasets[which(datasets$V3 %in% dropbyRDC()[4]),]
datasets$V3 %in% dropbyRDC()[4]
datasets$V3
dropbyRDC()[4]
datasets <- preloaddata()
datasets <- datasets[datasets$V4=='RDC Only'),]
datasets <- datasets[which(datasets$V4=='RDC Only'),]
View(datasets)
datasets <- datasets[!which(datasets$V4=='RDC Only'),]
datasets <- preloaddata()
datasets <- datasets[!which(datasets$V4=='RDC Only'),]
datasets <- preloaddata()
datasets <- datasets[which(datasets$V4 != 'RDC Only'),]
finalsets <- dropbyyear(1)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
data(list = tolower(c("DEMOS", datasets[[4]])))
classFilter <- function(x) inherits(get(x), 'data.frame' )
frames <- Filter( classFilter, ls() )
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
View(bpx)
ls()
ls(patern = "bmx")
ls(pattern = "bmx")
item = "bmx"
ls(pattern = item)
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(ls(pattern = item))
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
print(ls(pattern = item))
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
ls(pattern = "BPX")
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
print(ls(pattern = tolower(item)))
tempdata <- do.call(rbind.fill, lapply(ls(pattern = item), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
print(ls(pattern = tolower(item)))
tempdata <- do.call(rbind.fill, lapply(ls(pattern = tolower(item)), get))
print(tempdata)
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = tolower(item)), get))
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
unique(gsub("_.*$", "", datasets$V3)
)
classFilter <- function(x) inherits(get(x), 'data.frame' )
frames <- Filter( classFilter, ls() )
frames
datasets <- preloaddata()
datasets <- datasets[which(datasets$V4 != 'RDC Only'),]
finalsets <- dropbyyear(.5)
finalsets <- finalsets[finalsets != "DEMO"]
demos <- dropbyage(18)
rm(list = c("demo", "demo_b", "demo_c", "demo_d", "demo_e", "demo_f", "demo_g"))
datasets <- datasets[gsub("_.*$", "", datasets$V3) %in% finalsets, ]
data(list = tolower(c("DEMOS", datasets[[4]])))
for(item in unique(gsub("_.*$", "", datasets$V3))) {
print(item)
tempdata <- do.call(rbind.fill, lapply(ls(pattern = tolower(item)), get))
merge(demos, tempdata, by = "SEQN", all.x = TRUE)
}
View(datasets)
data(DR1IFF)
data(dr1iff)
data(dr1iff_c)
data(DR1IFF_C)
data(cbc_f)
data(CBC_F)
datasets[[4]]
data(tolower(datasets[[4]]))
data(list = tolower(datasets[[4]]))
warnings
warnings()
data(NHANES)
thepage = readLines('http://wwwn.cdc.gov/Nchs/Nhanes/Search/DataPage.aspx?Component=Demographics')
thepage
mypattern = 'http://wwwn.cdc.gov/Nchs/Nhanes/([^<]*).XPT'
datalines = grep(mypattern,thepage,value=TRUE)
datalines
thepage[1:100]
thepage[1:100]
mypattern = '^[http://wwwn.cdc.gov/Nchs/Nhanes/]*[.XPT]$'
datalines = grep(mypattern,thepage,value=TRUE)
datalines
